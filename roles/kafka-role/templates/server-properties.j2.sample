# {{ ansible_managed }}

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

#
# This configuration file is intended for use in ZK-based mode, where Apache ZooKeeper is required.
# See kafka.server.KafkaConfig for additional details and defaults
#

#
# This configuration file is intended for use in KRaft mode, where
# Apache ZooKeeper is not present.
#

############################# Broker Basics #############################

# The essential configurations are the following:
# node.id
# log.dirs
# process.roles
# controller.quorum.bootstrap.servers

# The node ID associated with the roles this process is playing when `process.roles` is non-empty. 
# This is required configuration when running in KRaft mode.
# Type: Int
# Importance: high
node.id={{ kafka_node_id }}

# The roles that this process plays: 'broker', 'controller', or 'broker,controller' if it is both.
# Valid Value: [broker, controller]
# Type: list
# Importance: high
process.roles={{ kafka_process_roles }}

# The maximum allowed timeout for adding partitions to transactions on the server side.
# It only applies to the actual add partition operations, not the verification.
# It will not be effective if it is larger than `request.timeout.ms`
# Type: Int
# Default: 100
# add.partitions.to.txn.retry.backoff.max.ms=

# The server-side retry backoff when the server attemptsto add the partition to the transaction.
# Type: Int
# Default: 20
# add.partitions.to.txn.retry.backoff.ms=

# Specifies the listener addresses that the Kafka brokers will advertise to clients and other brokers. 
# The config is useful where the actual listener configuration listeners does not represent the addresses that clients should use to connect, such as in cloud environments. 
# The addresses are published to and managed by the controller, the brokers pull these data from the controller as needed. In IaaS environments, this may need to be different from the interface to which the broker binds. 
# If this is not set, the value for listeners will be used. Unlike listeners, it is not valid to advertise the 0.0.0.0 meta-address.
# Also unlike listeners, there can be duplicated ports in this property, so that one listener can be configured to advertise another listener's address.
# This can be useful in some cases where external load balancers are used.
# Type: string
# Default: null
# advertised.listeners=

# Enable auto creation of topic on the server.
# Type: boolean
# Default: true
# auto.create.topics.enable=

# Enables auto leader balancing. A background thread checks the distribution of partition leaders at regular intervals, configurable by leader.imbalance.check.interval.seconds.
# If the leader is imbalanced, leader rebalance to the preferred leader for partitions is triggered.
# Type: boolean
# Default: true
# auto.leader.rebalance.enable=

# The number of threads to use for various background processing tasks.
# Type: Int
# Default: 10
# background.threads=

# The id of the broker. This must be set to a unique integer for each broker.
# Type: Int
# Default: -1 # next available integer
broker.id={{ kafka_broker_id }}

# Specify the final compression type for a given topic. This configuration accepts the standard compression codecs ('gzip', 'snappy', 'lz4', 'zstd').
# It additionally accepts 'uncompressed' which is equivalent to no compression; and 'producer' which means retain the original compression codec set by the producer.
# Type:	string
# Default: producer
# Valid Values:	[uncompressed, zstd, lz4, snappy, gzip, producer]
# compression.type=

# A comma-separated list of the names of the listeners used by the controller.
# This is required when communicating with the controller quorum, the broker will always use the first listener in this list.
# Type: string
# Default: null
# controller.listener.names=

# List of endpoints to use for bootstrapping the cluster metadata. 
# The endpoints are specified in comma-separated list of {host}:{port} entries. 
# For example: localhost:9092,localhost:9093,localhost:9094.
# Type: list
# Default: ""
# controller.quorum.bootstrap.servers=

# Enable auto creation of topic on the server
auto.create.topics.enable={{ kafka_auto_create_topics_enable }}

# Enables delete topic. Delete topic through the admin tool will have no
# effect if this config is turned off
delete.topic.enable={{ kafka_delete_topic_enable }}

# Default replication factor for automatically created topics.
default.replication.factor={{ kafka_default_replication_factor }}

# The number of threads to use for various background processing tasks
background.threads={{ kafka_background_threads }}

############################# Socket Server Settings #############################

# The address the socket server listens on. If not configured, the host name will be equal to the value of
# java.net.InetAddress.getCanonicalHostName(), with PLAINTEXT listener name, and port 9092.
#   FORMAT:
#     listeners = listener_name://host_name:port
#   EXAMPLE:
#     listeners = PLAINTEXT://your.host.name:9092
#listeners=PLAINTEXT://:9092
listeners={{ kafka_listeners | join(",")}}

# Listener name, hostname and port the broker will advertise to clients.
# If not set, it uses the value for "listeners".
#advertised.listeners=PLAINTEXT://your.host.name:9092
{% if kafka_advertised_listeners is defined %}
advertised.listeners={{ kafka_advertised_listeners | join(",")}}
{% endif %}

# Maps listener names to security protocols, the default is for them to be the same. See the config documentation for more details
#listener.security.protocol.map=PLAINTEXT:PLAINTEXT,SSL:SSL,SASL_PLAINTEXT:SASL_PLAINTEXT,SASL_SSL:SASL_SSL

# The number of threads that the server uses for receiving requests from the network and sending responses to the network
num.network.threads={{ kafka_num_network_threads }}

# The number of threads that the server uses for processing requests, which may include disk I/O
num.io.threads={{ kafka_num_io_threads }}

# Specify the number of threads that are used to replicate messages from a source broker. Increasing this value can lead to increased parallelism in I/O operations in the broker.
num.replica.fetchers={{ kafka_num_replica_fetchers }}

# The send buffer (SO_SNDBUF) used by the socket server
socket.send.buffer.bytes={{ kafka_socket_send_buffer_bytes }}

# The receive buffer (SO_RCVBUF) used by the socket server
socket.receive.buffer.bytes={{ kafka_socket_receive_buffer_bytes }}

# The maximum size of a request that the socket server will accept (protection against OOM)
socket.request.max.bytes={{ kafka_socket_request_max_bytes }}

# The socket receive buffer for network requests
replica.socket.receive.buffer.bytes={{ kafka_replica_socket_receive_buffer_bytes }}

############################# Log Basics #############################

# A comma separated list of directories under which to store log files
log.dirs={{ kafka_data_log_dirs }}

# The default number of log partitions per topic. More partitions allow greater
# parallelism for consumption, but this will also result in more files across
# the brokers.
num.partitions={{ kafka_num_partitions }}

# The number of threads per data directory to be used for log recovery at startup and flushing at shutdown.
# This value is recommended to be increased for installations with data dirs located in RAID array.
num.recovery.threads.per.data.dir={{ kafka_num_recovery_threads_per_data_dir }}

# The number of background threads to use for log cleaning
log.cleaner.threads={{ kafka_log_cleaner_threads }}

############################# Internal Topic Settings  #############################
# The replication factor for the group metadata internal topics "__consumer_offsets" and "__transaction_state"
# For anything other than development testing, a value greater than 1 is recommended for to ensure availability such as 3.
offsets.topic.replication.factor={{ kafka_offsets_topic_replication_factor }}
transaction.state.log.replication.factor={{ kafka_transaction_state_log_replication_factor }}
transaction.state.log.min.isr={{ kafka_transaction_state_log_min_isr }}

############################# Log Flush Policy #############################

# Messages are immediately written to the filesystem but by default we only fsync() to sync
# the OS cache lazily. The following configurations control the flush of data to disk.
# There are a few important trade-offs here:
#    1. Durability: Unflushed data may be lost if you are not using replication.
#    2. Latency: Very large flush intervals may lead to latency spikes when the flush does occur as there will be a lot of data to flush.
#    3. Throughput: The flush is generally the most expensive operation, and a small flush interval may lead to excessive seeks.
# The settings below allow one to configure the flush policy to flush data after a period of time or
# every N messages (or both). This can be done globally and overridden on a per-topic basis.

# The number of messages to accept before forcing a flush of data to disk
#log.flush.interval.messages=10000

# The maximum amount of time a message can sit in a log before we force a flush
#log.flush.interval.ms=1000

############################# Log Retention Policy #############################

# The following configurations control the disposal of log segments. The policy can
# be set to delete segments after a period of time, or after a given size has accumulated.
# A segment will be deleted whenever *either* of these criteria are met. Deletion always happens
# from the end of the log.

# The minimum age of a log file to be eligible for deletion due to age
log.retention.hours={{ kafka_log_retention_hours }}

# A size-based retention policy for logs. Segments are pruned from the log unless the remaining
# segments drop below log.retention.bytes. Functions independently of log.retention.hours.
#log.retention.bytes=1073741824

# The maximum size of a log segment file. When this size is reached a new log segment will be created.
log.segment.bytes={{ kafka_log_segment_bytes }}

# The interval at which log segments are checked to see if they can be deleted according
# to the retention policies
log.retention.check.interval.ms={{ kafka_log_retention_check_interval_ms }}

############################# Zookeeper #############################

# Zookeeper connection string (see zookeeper docs for details).
# This is a comma separated host:port pairs, each corresponding to a zk
# server. e.g. "127.0.0.1:3000,127.0.0.1:3001,127.0.0.1:3002".
# You can also append an optional chroot string to the urls to specify the
# root directory for all kafka znodes.
zookeeper.connect={{ kafka_zookeeper_connect }}

############################# Timeout #############################

# Timeout in ms for connecting to zookeeper
zookeeper.connection.timeout.ms={{ kafka_zookeeper_connection_timeout_ms }}
# Offset commit will be delayed until all replicas for the offsets topic receive the commit or this timeout is reached. This is similar to the producer request timeout.
offsets.commit.timeout.ms={{ kafka_offsets_commit_timeout_ms }}
# Max wait time for each fetcher request issued by follower replicas. This value should always be less than the replica.lag.time.max.ms at all times to prevent frequent shrinking of ISR for low throughput topics
replica.fetch.wait.max.ms={{ kafka_replica_fetch_wait_max_ms }}
# The amount of time to sleep when there are no logs to clean
log.cleaner.backoff.ms={{ kafka_log_cleaner_backoff_ms }}

############################# Group Coordinator Settings #############################

# The following configuration specifies the time, in milliseconds, that the GroupCoordinator will delay the initial consumer rebalance.
# The rebalance will be further delayed by the value of group.initial.rebalance.delay.ms as new members join the group, up to a maximum of max.poll.interval.ms.
# The default value for this is 3 seconds.
# We override this to 0 here as it makes for a better out-of-the-box experience for development and testing.
# However, in production environments the default value of 3 seconds is more suitable as this will help to avoid unnecessary, and potentially expensive, rebalances during application startup.
group.initial.rebalance.delay.ms={{ kafka_group_initial_rebalance_delay_ms }}